name: Update and Build Formulae
on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'
  repository_dispatch:
  workflow_dispatch:
    inputs:
      php_source:
        description: PHP release source
        required: false
      github_message:
        description: Message to pass optional parameters
        required: false
  pull_request:
env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_CHANGE_ARCH_TO_ARM: 1
jobs:
  tap-syntax:
    if: "!contains(github.event.head_commit.message, 'skip-build')"
    runs-on: ubuntu-latest
    env:
      HOMEBREW_FORCE_HOMEBREW_ON_LINUX: 1
    outputs:
      testing_formulae: ${{ steps.formulae-detect.outputs.testing_formulae }}
      added_formulae: ${{ steps.formulae-detect.outputs.added_formulae }}
      deleted_formulae: ${{ steps.formulae-detect.outputs.deleted_formulae }}
    steps:
      - name: Print details
        if: github.event_name == 'workflow_dispatch'
        run: echo php_source=${{github.event.inputs.php_source}}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Bundler RubyGems
        uses: actions/cache@v1
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Bundler RubyGems
        run: brew install-bundler-gems

      - run: brew test-bot --only-tap-syntax

      - run: brew test-bot --only-formulae-detect
        if: github.event_name == 'pull_request'
        id: formulae-detect

  create-pr:
    if: github.event_name != 'pull_request' && !contains(github.event.head_commit.message, 'skip-build')
    needs: tap-syntax
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php:
          - 'php'
          - 'php@5.6'
          - 'php@7.0'
          - 'php@7.1'
          - 'php@7.2'
          - 'php@7.3'
          - 'php@7.4'
          - 'php@8.0'
          - 'php@8.2'
    steps:
      - uses: actions/checkout@v2

      - name: Patch formula
        env:
          GITHUB_MESSAGE: ${{ github.event.head_commit.message || github.event.inputs.github_message }}
          PHP_VERSION: ${{ matrix.php }}
          PHP_SOURCE: ${{github.event.inputs.php_source}}
        run: bash ./.github/scripts/edit.sh

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
          commit-message: Update ${{ matrix.php }}
          committer: BrewTestBot <1589480+BrewTestBot@users.noreply.github.com>
          author: BrewTestBot <1589480+BrewTestBot@users.noreply.github.com>
          signoff: false
          base: master
          branch: update-${{ matrix.php }}
          branch-suffix: short-commit-hash
          delete-branch: true
          title: 'Update ${{ matrix.php }}'
          body: |
            Build ${{ matrix.php }}
          labels: ${{ matrix.php }},automated-pr
          assignees: ${{ github.repository_owner }}
          team-reviewers: |
            owners
            maintainers
          draft: false

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

  set-environment:
    if: github.event_name == 'pull_request' && !contains(github.event.head_commit.message, 'skip-build')
    runs-on: ubuntu-latest
    needs: tap-syntax
    outputs:
      syntax-only: ${{ steps.check-labels.outputs.syntax-only }}
      runners: ${{ steps.check-labels.outputs.runners }}
      fail-fast: ${{ steps.check-labels.outputs.fail-fast }}
      timeout-minutes: ${{ steps.check-labels.outputs.timeout-minutes }}
      container: ${{ steps.check-labels.outputs.container }}
      test-bot-formulae-args: ${{ steps.check-labels.outputs.test-bot-formulae-args }}
      test-bot-dependents-args: ${{ steps.check-labels.outputs.test-bot-dependents-args }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for CI labels
        id: check-labels
        uses: actions/github-script@v3
        env:
          SCRIPTS_PATH: .github/scripts
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const path = require('path')
            const script = require(path.resolve(`${process.env.SCRIPTS_PATH}/environment.js`))
            const formula_detect = {
              testing_formulae: '${{needs.tap-syntax.outputs.testing_formulae}}',
              added_formulae: '${{needs.tap-syntax.outputs.added_formulae}}',
              deleted_formulae: '${{needs.tap-syntax.outputs.deleted_formulae}}'
            }
            try {
              await script({github, context, core}, formula_detect)
            } catch (error) {
              console.error(error);
            }
  build-formula:
    needs: set-environment
    if: github.event_name == 'pull_request' && !contains(github.event.head_commit.message, 'skip-build')
    strategy:
      matrix:
        runner: ${{fromJson(needs.set-environment.outputs.runners)}}
      fail-fast: ${{fromJson(needs.set-environment.outputs.fail-fast)}}
    runs-on: ${{matrix.runner}}
    timeout-minutes: ${{fromJson(needs.set-environment.outputs.timeout-minutes)}}
    defaults:
      run:
        shell: /bin/bash -e {0}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Set environment variables
        if: runner.os == 'macOS'
        run: echo 'PATH=/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> $GITHUB_ENV

      - name: Set up Linux Homebrew Docker container
        if: runner.os == 'Linux'
        env:
          BREW_PATH: /home/linuxbrew/.linuxbrew/Homebrew
          TAP_PATH: /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/shivammathur/homebrew-php
        run: |
          docker run \
            --detach \
            --user linuxbrew \
            --name ${{github.sha}} \
            --env-file <(env | egrep 'HOMEBREW|GITHUB') \
            --workdir /tmp/bottles \
            --pull always \
            ${{needs.set-environment.outputs.container}} \
            sleep inf
          # Fix working directory permissions          
          docker exec --user linuxbrew ${{github.sha}} brew tap shivammathur/homebrew-php
          docker exec --user root ${{github.sha}} chmod 777 /tmp/bottles
          docker exec --workdir "$BREW_PATH" ${{github.sha}} git pull origin master
          docker exec --user linuxbrew ${{github.sha}} brew update
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-url origin ${{github.event.repository.html_url}}
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git fetch origin ${{github.sha}} '+refs/heads/*:refs/remotes/origin/*'
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-head origin --auto
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git checkout --force -B master FETCH_HEAD

      - name: Set up Homebrew
        id: set-up-homebrew
        if: runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Setup Xcode
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.runner }}" = "macos-10.15" ]; then
            sudo xcode-select -s /Applications/Xcode_11.7.app || exit 1
          else
            sudo xcode-select -s /Applications/Xcode_13.1.app || exit 1
          fi

      - name: brew test-bot --only-cleanup-before
        if: runner.os == 'macOS'
        run: brew test-bot --only-cleanup-before

      - name: Run brew test-bot --only-setup
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            brew test-bot --only-setup
          else
            docker exec ${{github.sha}} brew test-bot --only-setup
          fi

      - name: Run brew test-bot ${{ needs.set-environment.outputs.test-bot-formulae-args }}
        id: brew-test-bot-formulae
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            mkdir bottles
            cd bottles
            brew test-bot ${{ needs.set-environment.outputs.test-bot-formulae-args }}
          else
            docker exec ${{github.sha}} brew test-bot ${{ needs.set-environment.outputs.test-bot-formulae-args }}
          fi

      - name: Copy results from container
        if: always() && runner.os == 'Linux'
        run: docker cp ${{github.sha}}:/tmp/bottles .

      - name: Failures summary for brew test-bot ${{ needs.set-environment.outputs.test-bot-formulae-args }}
        if: always()
        run: |
          touch bottles/steps_output.txt
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Run brew test-bot ${{ needs.set-environment.outputs.test-bot-dependents-args }} --skipped-or-failed-formulae=${{ steps.brew-test-bot-formulae.outputs.skipped_or_failed_formulae }}
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            cd bottles
            brew test-bot ${{ needs.set-environment.outputs.test-bot-dependents-args }} --skipped-or-failed-formulae=${{ steps.brew-test-bot-formulae.outputs.skipped_or_failed_formulae }}
          else
            docker exec ${{github.sha}} brew test-bot ${{ needs.set-environment.outputs.test-bot-dependents-args }} --skipped-or-failed-formulae=${{ steps.brew-test-bot-formulae.outputs.skipped_or_failed_formulae }}
          fi
      - name: Copy results from container
        if: always() && runner.os == 'Linux'
        run: docker cp ${{github.sha}}:/tmp/bottles .

      - name: Failures summary for brew test-bot ${{ needs.set-environment.outputs.test-bot-dependents-args }} --skipped-or-failed-formulae=${{ steps.brew-test-bot-formulae.outputs.skipped_or_failed_formulae }}
        if: always()
        run: |
          touch bottles/steps_output.txt
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Output brew bottle result
        if: always()
        run: |
          cat bottles/bottle_output.txt
          rm bottles/bottle_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs-${{ matrix.runner }}
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Fix bottles json
        run: |
          cd bottles
          if [ "$RUNNER_OS" = 'macOS' ]; then
            LC_ALL=C find . -type f -name '*.json' -exec sed -i '' s~homebrew/bottles-php~${{ github.repository_owner }}/php~ {} +
            LC_ALL=C find . -type f -name '*.json' -exec sed -i '' s~bottles-php~php~ {} +
            LC_ALL=C find . -type f -name '*.json' -exec sed -i '' s~bottles~php~ {} +
          else
            LC_ALL=C find . -type f -name '*.json' -exec sed -i s~homebrew/bottles-php~${{ github.repository_owner }}/php~ {} +
            LC_ALL=C find . -type f -name '*.json' -exec sed -i s~bottles-php~php~ {} +
            LC_ALL=C find . -type f -name '*.json' -exec sed -i s~bottles~php~ {} +
          fi

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"
          failures=$(ls failed/*.json | wc -l | xargs echo -n)
          echo "$failures failed bottles"
          echo "::set-output name=failures::$failures"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: bottles/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf bottles/failed

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - name: Post cleanup
        if: always()
        run: |
          if [ "$RUNNER_OS" = 'Linux' ]; then
            docker rm -f ${{github.sha}}
          else
            brew test-bot --only-cleanup-after
          fi
          rm -rvf bottles
          if [ -L "$GITHUB_WORKSPACE" ]; then
            sudo rm -rf "$GITHUB_WORKSPACE"
          fi

  label:
    needs: build-formula
    if: github.event_name == 'pull_request' && !contains(github.event.head_commit.message, 'skip-build') && github.event.pull_request.user.login == github.repository_owner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Add Label"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr edit "$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')" --add-label "build-complete"
